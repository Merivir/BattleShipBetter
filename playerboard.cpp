#include "playerboard.h"
#include <QDebug>

PlayerBoard::PlayerBoard(QWidget *parent)
    : GameBoard(parent)
    , board(10, QVector<int>(10, 0))

{
    scene->setSceneRect(-labelOffset, -labelOffset, gridSize * cellSize + 2 * labelOffset, gridSize * cellSize + 2 * labelOffset);

    setFixedSize(gridSize * cellSize + 2 * labelOffset, gridSize * cellSize + 2 * labelOffset);

    setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
    setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
}

PlayerBoard::PlayerBoard(const PlayerBoard& other)
    : GameBoard(other) // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –±–∞–∑–æ–≤—ã–º –∫–ª–∞—Å—Å–æ–º
{
    board = QVector<QVector<int>>(10, QVector<int>(10, 0)); // 10x10 board filled with 0

    this->scene = new QGraphicsScene(this);
    this->setScene(scene);

    copyBoardAndSetupShips(other.board); // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å–∫–∏ –∏ –∫–æ—Ä–∞–±–ª–µ–π
}

void PlayerBoard::copyBoardAndSetupShips(const QVector<QVector<int>>& otherBoard) {
    this->board = otherBoard; // –ö–æ–ø–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–∏ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    this->scene->clear(); // –û—á–∏—â–∞–µ–º —Å—Ü–µ–Ω—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
    PlayerBoard::drawGrid(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–µ—Ç–∫—É

    // –¢–µ–ø–µ—Ä—å, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–∏, —Å–æ–∑–¥–∞–µ–º –∫–æ—Ä–∞–±–ª–∏
    for (int row = 0; row < gridSize; ++row) {
        for (int col = 0; col < gridSize; ++col) {
            int cellState = board[row][col];
            if (cellState == 1) { // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ 1 –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ—Ä–∞–±–ª—è
                QGraphicsRectItem *shipPart = new QGraphicsRectItem(col * cellSize, row * cellSize, cellSize, cellSize);
                shipPart->setBrush(QBrush(Qt::gray)); // –ó–∞–¥–∞–µ–º —Ü–≤–µ—Ç –∫–æ—Ä–∞–±–ª—è
                scene->addItem(shipPart); // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∞–±–ª—è –Ω–∞ —Å—Ü–µ–Ω—É
            }
            // –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —è—á–µ–µ–∫
        }
    }
}



bool PlayerBoard::placeShip(int size, Ship::Orientation orientation, int startRow, int startCol) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–≤–æ–±–æ–¥–Ω–æ –ª–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤–æ–∫—Ä—É–≥ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è
    if (!isSpaceAroundShipFree(startRow, startCol, size, orientation)) {
        return false; // –ï—Å–ª–∏ –≤–æ–∫—Ä—É–≥ –∫–æ—Ä–∞–±–ª—è –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
    }

    // –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤–æ–∫—Ä—É–≥, –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–æ—Ä–∞–±–ª—å
    // –û—Å—Ç–∞–≤—à–∞—è—Å—è —á–∞—Å—Ç—å –º–µ—Ç–æ–¥–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
    if (orientation == Ship::Horizontal) {
        if (startCol + size > gridSize) return false; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        for (int i = 0; i < size; ++i) {
            if (board[startRow][startCol + i] != 0) return false; // –ú–µ—Å—Ç–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ
        }
        for (int i = 0; i < size; ++i) board[startRow][startCol + i] = 1; // –†–∞–∑–º–µ—â–∞–µ–º —á–∞—Å—Ç–∏ –∫–æ—Ä–∞–±–ª—è
    } else { // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
        if (startRow + size > gridSize) return false; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        for (int i = 0; i < size; ++i) {
            if (board[startRow + i][startCol] != 0) return false; // –ú–µ—Å—Ç–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ
        }
        for (int i = 0; i < size; ++i) board[startRow + i][startCol] = 1; // –†–∞–∑–º–µ—â–∞–µ–º —á–∞—Å—Ç–∏ –∫–æ—Ä–∞–±–ª—è
    }
    return true; // –ö–æ—Ä–∞–±–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω
}



bool PlayerBoard::isSpaceAroundShipFree(int startRow, int startCol, int size, Ship::Orientation orientation) const {
    int fromRow = std::max(0, startRow - 1);
    int toRow = std::min(gridSize - 1, (orientation == Ship::Vertical) ? startRow + size : startRow + 1);
    int fromCol = std::max(0, startCol - 1);
    int toCol = std::min(gridSize - 1, (orientation == Ship::Horizontal) ? startCol + size : startCol + 1);

    for (int row = fromRow; row <= toRow; ++row) {
        for (int col = fromCol; col <= toCol; ++col) {
            if (board[row][col] != 0) return false; // Space not free
        }
    }
    return true; // Space around ship is free
}

void PlayerBoard::setupBoard() {
    clearBoard();
    board = QVector<QVector<int>>(10, QVector<int>(10, 0));
    QList<int> shipSizes = {4, 3, 3, 2, 2, 2, 1, 1, 1, 1};
    QRandomGenerator *rg = QRandomGenerator::global();

    for (int size : shipSizes) {
        bool placed = false;
        int attempts = 0;
        while (!placed && attempts < 100) {
            int row = rg->bounded(10);
            int col = rg->bounded(10);
            Ship::Orientation orientation = rg->bounded(2) == 0 ? Ship::Horizontal : Ship::Vertical;

            if (placeShip(size, orientation, row, col)) {
                // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è
                Ship* newShip = new Ship(size, orientation); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π —Ä–∞–∑–º–µ—Ä –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
                newShip->setPos(col * cellSize, row * cellSize); // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∫–æ—Ä–∞–±–ª—è —Å —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è
                scene->addItem(newShip); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è –Ω–∞ —Å—Ü–µ–Ω—É

                placed = true;
            } else {
                attempts++;
            }
        }
        if (attempts >= 100) {
            qDebug() << "Unable to place ship of size" << size << "after 100 attempts.";
        }
    }
    qDebug() << "Finished setting up the board.";
}


void PlayerBoard::renderBoard() {
    for (int row = 0; row < board.size(); ++row) {
        QString line;
        for (int col = 0; col < board[row].size(); ++col) {
            switch (board[row][col]) {
                case 0: line += "~"; break; // Water
                case 1: line += "S"; break; // Ship (unhit)
                case 2: line += "*"; break; // Hit ship part
                default: line += "?"; break; // Unknown state
            }
            line += " ";
        }
        qDebug() << line; // Assuming you're using Qt's debug output
    }
}

bool PlayerBoard::isHit(int row, int col) {
    // Ensure row and col are within the board's bounds before checking
    if (row >= 0 && row < board.size() && col >= 0 && col < board[row].size()) {
        if (board[row][col] == 1) {
            board[row][col] = 2; // Mark this part as hit
            return true;
        }
    }
    return false;
}


void PlayerBoard::drawGrid() {
    const int gridSize = 10;
    const int cellSize = 40;
    const int labelOffset = 20;


    for (int i = 0; i < gridSize; ++i) {
        QGraphicsTextItem *columnLabel = scene->addText(columnLabels[i]);
        columnLabel->setPos(i * cellSize + cellSize / 2, -labelOffset);
    }

    for (int i = 0; i < gridSize; ++i) {
        QGraphicsTextItem *rowLabel = scene->addText(rowLabels[i]);
        rowLabel->setPos(-labelOffset, i * cellSize + cellSize / 2 - rowLabel->boundingRect().height() / 2);
    }

    for (int i = 0; i <= gridSize; ++i) {
        int x = i * cellSize;
        scene->addLine(x, 0, x, gridSize * cellSize, QPen(Qt::black));
    }

    for (int i = 0; i <= gridSize; ++i) {
        int y = i * cellSize;
        scene->addLine(0, y, gridSize * cellSize, y, QPen(Qt::black));
    }

}

void PlayerBoard::clearBoard() {
    scene->clear(); // –Ø–≤–Ω–æ –æ—á–∏—â–∞–µ–º —Å—Ü–µ–Ω—É
    drawGrid();
    ships.clear(); // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∞–±–ª–µ–π
    board.fill(QVector<int>(10, 0)); // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏
}


void PlayerBoard::resetBoard() {
    clearBoard(); // Clears the graphical scene and ship items.
    board.fill(QVector<int>(10, 0)); // Reset the logical board representation.
    setupBoard(); // Optionally call setupBoard to reinitialize the game state.
}

void PlayerBoard::markCellAsBombed(int row, int col, const QString& result) {
    if (row < 0 || row >= gridSize || col < 0 || col >= gridSize) {
        qDebug() << "Invalid cell coordinates:" << row << "," << col;
        return;
    }

    // Calculate the center position of the cell
    int centerX = col * cellSize + cellSize / 2 ;
    int centerY = row * cellSize + cellSize / 2 ;

    // Determine the symbol or text to display based on the result
    QString displayText;
    if (result == "hit") {
        displayText = "üí£"; // Use a bomb emoji for hits
    } else if (result == "miss") {
        displayText = "‚ùå"; // Use a cross mark for misses
    } else {
        qDebug() << "Unknown result:" << result;
        return; // Exit if the result is neither "hit" nor "miss"
    }

    // Create and configure a QGraphicsTextItem for the display text
    QGraphicsTextItem* textItem = new QGraphicsTextItem(displayText);
    QFont font = textItem->font();
    font.setPointSize(cellSize / 2); // Set font size relative to cell size
    textItem->setFont(font);

    // Get the bounding rect to calculate offsets for centering
    QRectF textRect = textItem->boundingRect();
    textItem->setPos(centerX - textRect.width() / 2, centerY - textRect.height() / 2); // Center the text item

    scene->addItem(textItem); // Add the text item to the scene

    // Optionally, update the board data model if needed
    if (result == "hit") {
        board[row][col] = 2; // Example: Let's say '2' represents a hit state
    } else if (result == "miss") {
        board[row][col] = 3; // Example: Let's say '3' represents a miss state
    }
}



QString PlayerBoard::checkAttack(int row, int col) {
    int &cell = board[row][col];
    qDebug() << "checking:" << row << col;

    QString result = "miss";
    if (cell == 1) { // Ship is hit
        cell = 2; // Mark as hit
        // Further check if the ship is sunk could be implemented here
        result = "hit";
    } else if (cell == 0) { // Missed shot
        cell = 3; // Mark as missed
        result = "miss";
    }

    markCellAsBombed(row, col, result);
    return result; // Default case, might include hits on already hit locations
}
